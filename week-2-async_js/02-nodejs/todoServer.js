/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const { v4: uuidv4 } = require("uuid");

const app = express();
app.use(bodyParser.json());

//  GET all the todos
app.get("/todos", (req, res) => {
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    const fileData = JSON.parse(data);
    if (err)
      return res.status(500).send({ message: "Something went wrong", err });
    res.json(fileData);
  });
});

//  GET a single todo with :id
app.get("/todos/:id", (req, res) => {
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err)
      return res.status(500).send({ message: "Something went wrong", err });
    const fileData = JSON.parse(data);
    const singleTodo = fileData.find((value) => value.id === req.params.id);
    if (singleTodo) res.json(singleTodo);
    else res.status(404).send({ message: "No todo found" });
  });
});

//  Add a new todo
app.post("/todos", (req, res) => {
  fs.readFile("todos.json", "utf-8", (err, data) => {
    const fileData = JSON.parse(data);
    if (err)
      return res.status(500).send({ message: "Something went wrong", err });
    const newTodo = req.body;
    newTodo.id = uuidv4();
    fileData.push(newTodo);
    fs.writeFile("./todos.json", JSON.stringify(fileData), (err) => {
      if (err)
        return res.status(500).send({ message: "Something went wrong", err });
      res.status(201).json(newTodo);
    });
  });
});

//  Update a single todo with :id
app.put("/todos/:id", (req, res) => {
  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err)
      return res.status(500).send({ message: "Something went wrong", err });
    const todo = JSON.parse(data).find((val) => val.id === req.params.id);
    if (!todo) return res.status(404).send({ message: "No todo found" });
    // console.log(todo, req.body);
    todo.title = req.body.title ?? todo.title;
    todo.description = req.body.description ?? todo.description;
    todo.complete = req.body.complete ?? todo.complete;
    const newTodos = JSON.parse(data).map((t) => {
      if (t.id === req.params.id) return todo;
      return t;
    });
    fs.writeFile("todos.json", JSON.stringify(newTodos), (err) => {
      if (err)
        return res.status(500).send({ message: "Something went wrong", err });
      res.status(200).json(todo);
    });
  });
});

//  Delete a todo with :id
app.delete("/todos/:id", (req, res) => {
  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err) res.status(500).send({ message: "Something went wrong", err });
    const exist = JSON.parse(data).find((t) => t.id === req.params.id);
    console.log(exist);
    if (!exist) return res.status(404).send({ message: "Todo not found" });
    const todos = JSON.parse(data).filter((t) => t.id !== req.params.id);
    fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
      if (err)
        return res.status(500).send({ message: "Something went wrong", err });
      res.status(200).send();
    });
  });
});

module.exports = app;
